{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file:///Users/kingoros/Personal%20Projects/thumbbat-upgraded/server/models/User.ts"],"sourcesContent":["import mongoose from \"mongoose\";\n\nconst userSchema = new mongoose.Schema({\n  username: {\n    type: String,\n    required: true,\n    unique: true,\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n  },\n  password: {\n    type: String,\n    required: true,\n  },\n  isConfirmed: {\n    type: Boolean,\n    default: false,\n  },\n  confirmationToken: {\n    type: String,\n  },\n  highScore: {\n    type: Number,\n    default: 0,\n  },\n  wins: {\n    type: Number,\n    default: 0,\n  },\n  losses: {\n    type: Number,\n    default: 0,\n  },\n  winPercentage: {\n    type: Number,\n    default: 0,\n  },\n});\n\nexport default mongoose.models.User || mongoose.model(\"User\", userSchema);\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACrC,UAAU;QACR,MAAM;QACN,UAAU;QACV,QAAQ;IACV;IACA,OAAO;QACL,MAAM;QACN,UAAU;QACV,QAAQ;IACV;IACA,UAAU;QACR,MAAM;QACN,UAAU;IACZ;IACA,aAAa;QACX,MAAM;QACN,SAAS;IACX;IACA,mBAAmB;QACjB,MAAM;IACR;IACA,WAAW;QACT,MAAM;QACN,SAAS;IACX;IACA,MAAM;QACJ,MAAM;QACN,SAAS;IACX;IACA,QAAQ;QACN,MAAM;QACN,SAAS;IACX;IACA,eAAe;QACb,MAAM;QACN,SAAS;IACX;AACF;uCAEe,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ"}},
    {"offset": {"line": 140, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 146, "column": 0}, "map": {"version":3,"sources":["file:///Users/kingoros/Personal%20Projects/thumbbat-upgraded/src/app/api/auth/login/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport User from \"@/server/models/User\";\nimport dbConnect from \"@/lib/db\";\n\nexport async function POST(request: Request) {\n  try {\n    await dbConnect();\n    const { username, password } = await request.json();\n\n    if (!username || !password) {\n      return NextResponse.json(\n        { error: \"Username and password are required\" },\n        { status: 400 }\n      );\n    }\n\n    const user = await User.findOne({ username });\n    if (!user) {\n      return NextResponse.json({ error: \"User not found\" }, { status: 400 });\n    }\n\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) {\n      return NextResponse.json(\n        { error: \"Invalid credentials\" },\n        { status: 400 }\n      );\n    }\n\n    if (!user.isConfirmed) {\n      return NextResponse.json(\n        {\n          error:\n            \"Confirmation Pending! Please click on the confirmation link in the email sent to you.\",\n        },\n        { status: 400 }\n      );\n    }\n\n    const token = jwt.sign(\n      { userId: user._id },\n      process.env.JWT_SECRET as string,\n      { expiresIn: \"1d\" }\n    );\n\n    return NextResponse.json({\n      token,\n      username: user.username,\n      highScore: user.highScore,\n      message: \"Login successful\",\n    });\n  } catch (error) {\n    console.error(\"Login error:\", error);\n    return NextResponse.json(\n      { error: \"Internal server error\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;;;;;;;AAGO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM;QACN,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEjD,IAAI,CAAC,YAAY,CAAC,UAAU;YAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAqC,GAC9C;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,OAAO,MAAM,0HAAA,CAAA,UAAI,CAAC,OAAO,CAAC;YAAE;QAAS;QAC3C,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACtE;QAEA,MAAM,UAAU,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,KAAK,QAAQ;QAC5D,IAAI,CAAC,SAAS;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsB,GAC/B;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,CAAC,KAAK,WAAW,EAAE;YACrB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBACE,OACE;YACJ,GACA;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,QAAQ,uIAAA,CAAA,UAAG,CAAC,IAAI,CACpB;YAAE,QAAQ,KAAK,GAAG;QAAC,yDAEnB;YAAE,WAAW;QAAK;QAGpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB;YACA,UAAU,KAAK,QAAQ;YACvB,WAAW,KAAK,SAAS;YACzB,SAAS;QACX;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gBAAgB;QAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 219, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}