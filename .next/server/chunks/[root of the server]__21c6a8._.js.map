{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/kingoros/Personal%20Projects/thumbbat-upgraded/server/models/User.ts"],"sourcesContent":["import mongoose from \"mongoose\";\n\nconst userSchema = new mongoose.Schema({\n  username: {\n    type: String,\n    required: true,\n    unique: true,\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n  },\n  password: {\n    type: String,\n    required: true,\n  },\n  isConfirmed: {\n    type: Boolean,\n    default: false,\n  },\n  confirmationToken: {\n    type: String,\n  },\n  highScore: {\n    type: Number,\n    default: 0,\n  },\n  wins: {\n    type: Number,\n    default: 0,\n  },\n  losses: {\n    type: Number,\n    default: 0,\n  },\n  winPercentage: {\n    type: Number,\n    default: 0,\n  },\n});\n\nexport default mongoose.models.User || mongoose.model(\"User\", userSchema);\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACrC,UAAU;QACR,MAAM;QACN,UAAU;QACV,QAAQ;IACV;IACA,OAAO;QACL,MAAM;QACN,UAAU;QACV,QAAQ;IACV;IACA,UAAU;QACR,MAAM;QACN,UAAU;IACZ;IACA,aAAa;QACX,MAAM;QACN,SAAS;IACX;IACA,mBAAmB;QACjB,MAAM;IACR;IACA,WAAW;QACT,MAAM;QACN,SAAS;IACX;IACA,MAAM;QACJ,MAAM;QACN,SAAS;IACX;IACA,QAAQ;QACN,MAAM;QACN,SAAS;IACX;IACA,eAAe;QACb,MAAM;QACN,SAAS;IACX;AACF;uCAEe,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ"}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file:///Users/kingoros/Personal%20Projects/thumbbat-upgraded/server/config/db.ts"],"sourcesContent":["import mongoose from \"mongoose\";\n\n// Use a type-safe workaround for global.mongoose\nconst globalWithMongoose = global as typeof globalThis & {\n  mongoose: {\n    conn: mongoose.Connection | null;\n    promise: Promise<mongoose.Connection> | null;\n  };\n};\n\n// Initialize global.mongoose if it doesn't exist\nif (!globalWithMongoose.mongoose) {\n  globalWithMongoose.mongoose = { conn: null, promise: null };\n}\n\nasync function dbConnect(): Promise<mongoose.Connection> {\n  const MONGODB_URI = process.env.MONGODB_URI;\n\n  if (!MONGODB_URI) {\n    console.error(\n      \"MONGODB_URI is not defined. Please check your environment variables.\"\n    );\n    process.exit(1);\n  }\n\n  if (globalWithMongoose.mongoose.conn) {\n    return globalWithMongoose.mongoose.conn;\n  }\n\n  if (!globalWithMongoose.mongoose.promise) {\n    globalWithMongoose.mongoose.promise = mongoose\n      .connect(MONGODB_URI, {\n        dbName: \"test\", // Replace with your actual DB name\n        bufferCommands: false,\n      })\n      .then((mongoose) => mongoose.connection);\n  }\n\n  globalWithMongoose.mongoose.conn = await globalWithMongoose.mongoose.promise;\n  return globalWithMongoose.mongoose.conn;\n}\n\nexport default dbConnect;\n"],"names":[],"mappings":";;;AAAA;;AAEA,iDAAiD;AACjD,MAAM,qBAAqB;AAO3B,iDAAiD;AACjD,IAAI,CAAC,mBAAmB,QAAQ,EAAE;IAChC,mBAAmB,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AAC5D;AAEA,eAAe;IACb,MAAM;IAEN,uCAAkB;;IAKlB;IAEA,IAAI,mBAAmB,QAAQ,CAAC,IAAI,EAAE;QACpC,OAAO,mBAAmB,QAAQ,CAAC,IAAI;IACzC;IAEA,IAAI,CAAC,mBAAmB,QAAQ,CAAC,OAAO,EAAE;QACxC,mBAAmB,QAAQ,CAAC,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAC3C,OAAO,CAAC,aAAa;YACpB,QAAQ;YACR,gBAAgB;QAClB,GACC,IAAI,CAAC,CAAC,WAAa,SAAS,UAAU;IAC3C;IAEA,mBAAmB,QAAQ,CAAC,IAAI,GAAG,MAAM,mBAAmB,QAAQ,CAAC,OAAO;IAC5E,OAAO,mBAAmB,QAAQ,CAAC,IAAI;AACzC;uCAEe"}},
    {"offset": {"line": 146, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 152, "column": 0}, "map": {"version":3,"sources":["file:///Users/kingoros/Personal%20Projects/thumbbat-upgraded/src/app/api/leaderboard/route.ts"],"sourcesContent":["import User from \"@/server/models/User\";\nimport { NextResponse } from \"next/server\";\nimport dbConnect from \"@/server/config/db\";\n\nexport async function GET() {\n  try {\n    // Establish database connection first\n    await dbConnect();\n\n    // Now check database connection\n    if (!User?.db?.readyState) {\n      console.error(\"Database connection not established\");\n      return NextResponse.json(\n        { error: \"Database connection not established\" },\n        { status: 503 } // Changed to 503 Service Unavailable\n      );\n    }\n\n    const leaderboard = await User.find({ highScore: { $gt: 0 } })\n      .sort({ highScore: -1 })\n      .limit(50)\n      .select(\"username highScore winPercentage\")\n      .lean();\n\n    // Modified empty results check\n    if (!leaderboard || leaderboard.length === 0) {\n      return NextResponse.json(\n        { data: [], message: \"No leaderboard data available\" },\n        { status: 200 } // Changed to return empty array instead of 404\n      );\n    }\n\n    // Set CORS headers\n    const response = NextResponse.json({ data: leaderboard, success: true });\n\n    response.headers.set(\"Access-Control-Allow-Origin\", \"*\");\n    response.headers.set(\n      \"Access-Control-Allow-Methods\",\n      \"GET, POST, PUT, DELETE, OPTIONS\"\n    );\n    response.headers.set(\n      \"Access-Control-Allow-Headers\",\n      \"Content-Type, Authorization\"\n    );\n\n    return response;\n  } catch (err) {\n    // More detailed error logging\n    console.error(\"Error fetching leaderboard:\", {\n      message: (err as Error).message,\n      stack: (err as Error).stack,\n    });\n\n    return NextResponse.json(\n      {\n        error: \"Something went wrong while fetching the leaderboard.\",\n        details:\n          process.env.NODE_ENV === \"development\"\n            ? (err as Error).message\n            : undefined,\n      },\n      { status: 500 }\n    );\n  }\n}\n\n// Handle OPTIONS request for CORS preflight\nexport async function OPTIONS() {\n  const response = new NextResponse(null, {\n    status: 200,\n  });\n\n  response.headers.set(\"Access-Control-Allow-Origin\", \"*\");\n  response.headers.set(\n    \"Access-Control-Allow-Methods\",\n    \"GET, POST, PUT, DELETE, OPTIONS\"\n  );\n  response.headers.set(\n    \"Access-Control-Allow-Headers\",\n    \"Content-Type, Authorization\"\n  );\n\n  return response;\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEO,eAAe;IACpB,IAAI;QACF,sCAAsC;QACtC,MAAM,CAAA,GAAA,wHAAA,CAAA,UAAS,AAAD;QAEd,gCAAgC;QAChC,IAAI,CAAC,0HAAA,CAAA,UAAI,EAAE,IAAI,YAAY;YACzB,QAAQ,KAAK,CAAC;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsC,GAC/C;gBAAE,QAAQ;YAAI,EAAE,qCAAqC;;QAEzD;QAEA,MAAM,cAAc,MAAM,0HAAA,CAAA,UAAI,CAAC,IAAI,CAAC;YAAE,WAAW;gBAAE,KAAK;YAAE;QAAE,GACzD,IAAI,CAAC;YAAE,WAAW,CAAC;QAAE,GACrB,KAAK,CAAC,IACN,MAAM,CAAC,oCACP,IAAI;QAEP,+BAA+B;QAC/B,IAAI,CAAC,eAAe,YAAY,MAAM,KAAK,GAAG;YAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,MAAM,EAAE;gBAAE,SAAS;YAAgC,GACrD;gBAAE,QAAQ;YAAI,EAAE,+CAA+C;;QAEnE;QAEA,mBAAmB;QACnB,MAAM,WAAW,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,MAAM;YAAa,SAAS;QAAK;QAEtE,SAAS,OAAO,CAAC,GAAG,CAAC,+BAA+B;QACpD,SAAS,OAAO,CAAC,GAAG,CAClB,gCACA;QAEF,SAAS,OAAO,CAAC,GAAG,CAClB,gCACA;QAGF,OAAO;IACT,EAAE,OAAO,KAAK;QACZ,8BAA8B;QAC9B,QAAQ,KAAK,CAAC,+BAA+B;YAC3C,SAAS,AAAC,IAAc,OAAO;YAC/B,OAAO,AAAC,IAAc,KAAK;QAC7B;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,OAAO;YACP,SACE,uCACI,AAAC,IAAc,OAAO;QAE9B,GACA;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe;IACpB,MAAM,WAAW,IAAI,gIAAA,CAAA,eAAY,CAAC,MAAM;QACtC,QAAQ;IACV;IAEA,SAAS,OAAO,CAAC,GAAG,CAAC,+BAA+B;IACpD,SAAS,OAAO,CAAC,GAAG,CAClB,gCACA;IAEF,SAAS,OAAO,CAAC,GAAG,CAClB,gCACA;IAGF,OAAO;AACT"}},
    {"offset": {"line": 225, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}