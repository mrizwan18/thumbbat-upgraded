{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 175, "column": 0}, "map": {"version":3,"sources":["file:///Users/kingoros/Personal%20Projects/thumbbat-upgraded/server/models/User.ts"],"sourcesContent":["import mongoose from \"mongoose\";\n\nconst userSchema = new mongoose.Schema({\n  username: {\n    type: String,\n    required: true,\n    unique: true,\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n  },\n  password: {\n    type: String,\n    required: true,\n  },\n  isConfirmed: {\n    type: Boolean,\n    default: false,\n  },\n  confirmationToken: {\n    type: String,\n  },\n  highScore: {\n    type: Number,\n    default: 0,\n  },\n  wins: {\n    type: Number,\n    default: 0,\n  },\n  losses: {\n    type: Number,\n    default: 0,\n  },\n  winPercentage: {\n    type: Number,\n    default: 0,\n  },\n});\n\nexport default mongoose.models.User || mongoose.model(\"User\", userSchema);\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACrC,UAAU;QACR,MAAM;QACN,UAAU;QACV,QAAQ;IACV;IACA,OAAO;QACL,MAAM;QACN,UAAU;QACV,QAAQ;IACV;IACA,UAAU;QACR,MAAM;QACN,UAAU;IACZ;IACA,aAAa;QACX,MAAM;QACN,SAAS;IACX;IACA,mBAAmB;QACjB,MAAM;IACR;IACA,WAAW;QACT,MAAM;QACN,SAAS;IACX;IACA,MAAM;QACJ,MAAM;QACN,SAAS;IACX;IACA,QAAQ;QACN,MAAM;QACN,SAAS;IACX;IACA,eAAe;QACb,MAAM;QACN,SAAS;IACX;AACF;uCAEe,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ"}},
    {"offset": {"line": 220, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 234, "column": 0}, "map": {"version":3,"sources":["file:///Users/kingoros/Personal%20Projects/thumbbat-upgraded/src/app/api/auth/signup/route.ts"],"sourcesContent":["import bcrypt from \"bcryptjs\";\nimport nodemailer from \"nodemailer\";\nimport crypto from \"crypto\";\nimport User from \"@/server/models/User\";\nimport { NextResponse } from \"next/server\";\n\nconst FRONTEND_URL =\n  process.env.NODE_ENV === \"production\"\n    ? process.env.PROD_FRONTEND_URL\n    : process.env.DEV_FRONTEND_URL;\n\nconst transporter = nodemailer.createTransport({\n  service: \"Gmail\",\n  auth: {\n    user: process.env.EMAIL_USER,\n    pass: process.env.EMAIL_PASS,\n  },\n});\n\nexport async function POST(request: Request) {\n  try {\n    const { username, email, password } = await request.json();\n\n    if (!username || !email || !password) {\n      return NextResponse.json(\n        { error: \"Missing required fields\" },\n        { status: 400 }\n      );\n    }\n\n    // Check for existing user\n    const existingUser = await User.findOne({ username });\n    if (existingUser) {\n      return NextResponse.json(\n        { error: \"Username already taken\" },\n        { status: 400 }\n      );\n    }\n\n    const existingEmail = await User.findOne({ email });\n    if (existingEmail) {\n      return NextResponse.json(\n        { error: \"Email already taken\" },\n        { status: 400 }\n      );\n    }\n\n    const hashedPassword = await bcrypt.hash(password, 10);\n    const confirmationToken = crypto.randomBytes(20).toString(\"hex\");\n\n    const newUser = new User({\n      username,\n      email,\n      password: hashedPassword,\n      confirmationToken,\n    });\n\n    // Send confirmation email\n    const confirmationUrl = `${FRONTEND_URL}/confirm?token=${confirmationToken}`;\n    await sendConfirmationEmail(username, email, confirmationUrl);\n    await newUser.save();\n\n    return NextResponse.json({\n      message: \"User created! Please check your email to confirm your account.\",\n    });\n  } catch (error) {\n    console.error(\"Signup error:\", error);\n    return NextResponse.json(\n      { error: \"Internal server error\" },\n      { status: 500 }\n    );\n  }\n}\n\nasync function sendConfirmationEmail(\n  username: string,\n  email: string,\n  confirmationUrl: string\n) {\n  const emailHtml = `\n    <html>\n      <body style=\"font-family: Arial, sans-serif; background-color: #f9f9f9; padding: 20px;\">\n        <div style=\"max-width: 600px; margin: 0 auto; background-color: #ffffff; padding: 20px; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);\">\n          <h2 style=\"color: #333333; text-align: center;\">Welcome to ThumbBat!</h2>\n          <p style=\"color: #555555; font-size: 16px; line-height: 1.5;\">\n            Hello <strong>${username}</strong>,\n          </p>\n          <p style=\"color: #555555; font-size: 16px; line-height: 1.5;\">\n            Thank you for signing up! Please confirm your account by clicking the button below:\n          </p>\n          <table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" style=\"margin-top: 20px;\">\n            <tr>\n              <td style=\"background-color: #4CAF50; border-radius: 5px;\">\n                <a href=\"${confirmationUrl}\" style=\"display: inline-block; background-color: #4CAF50; color: white; padding: 15px 30px; text-decoration: none; font-size: 16px; border-radius: 5px; text-align: center;\">\n                  Confirm My Account\n                </a>\n              </td>\n            </tr>\n          </table>\n          <p style=\"color: #555555; font-size: 16px; line-height: 1.5;\">\n            If the button above does not work, please copy and paste the following URL into your browser:\n          </p>\n          <p style=\"color: #555555; font-size: 16px; line-height: 1.5;\">\n            ${confirmationUrl}\n          </p>\n          <p style=\"color: #555555; font-size: 16px; line-height: 1.5;\">\n            If you did not sign up for this account, please ignore this email.\n          </p>\n          <p style=\"color: #888888; font-size: 14px; text-align: center; margin-top: 30px;\">\n            &copy; ${new Date().getFullYear()} ThumbBat. All rights reserved.\n          </p>\n        </div>\n      </body>\n    </html>\n  `;\n\n  const mailOptions = {\n    from: process.env.EMAIL_USER,\n    to: email,\n    subject: \"ThumbBat Account Confirmation\",\n    html: emailHtml,\n  };\n\n  await transporter.sendMail(mailOptions);\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAEA,MAAM,eACJ,6EAEI,QAAQ,GAAG,CAAC,gBAAgB;AAElC,MAAM,cAAc,iJAAA,CAAA,UAAU,CAAC,eAAe,CAAC;IAC7C,SAAS;IACT,MAAM;QACJ,IAAI;QACJ,IAAI;IACN;AACF;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,QAAQ,IAAI;QAExD,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,UAAU;YACpC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0B,GACnC;gBAAE,QAAQ;YAAI;QAElB;QAEA,0BAA0B;QAC1B,MAAM,eAAe,MAAM,0HAAA,CAAA,UAAI,CAAC,OAAO,CAAC;YAAE;QAAS;QACnD,IAAI,cAAc;YAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAyB,GAClC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,gBAAgB,MAAM,0HAAA,CAAA,UAAI,CAAC,OAAO,CAAC;YAAE;QAAM;QACjD,IAAI,eAAe;YACjB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsB,GAC/B;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QACnD,MAAM,oBAAoB,qGAAA,CAAA,UAAM,CAAC,WAAW,CAAC,IAAI,QAAQ,CAAC;QAE1D,MAAM,UAAU,IAAI,0HAAA,CAAA,UAAI,CAAC;YACvB;YACA;YACA,UAAU;YACV;QACF;QAEA,0BAA0B;QAC1B,MAAM,kBAAkB,GAAG,aAAa,eAAe,EAAE,mBAAmB;QAC5E,MAAM,sBAAsB,UAAU,OAAO;QAC7C,MAAM,QAAQ,IAAI;QAElB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;QACX;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iBAAiB;QAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEA,eAAe,sBACb,QAAgB,EAChB,KAAa,EACb,eAAuB;IAEvB,MAAM,YAAY,CAAC;;;;;;0BAMK,EAAE,SAAS;;;;;;;;yBAQZ,EAAE,gBAAgB;;;;;;;;;;YAU/B,EAAE,gBAAgB;;;;;;mBAMX,EAAE,IAAI,OAAO,WAAW,GAAG;;;;;EAK5C,CAAC;IAED,MAAM,cAAc;QAClB,IAAI;QACJ,IAAI;QACJ,SAAS;QACT,MAAM;IACR;IAEA,MAAM,YAAY,QAAQ,CAAC;AAC7B"}},
    {"offset": {"line": 355, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}