{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/kingoros/Personal%20Projects/thumbbat-upgraded/server/models/User.ts"],"sourcesContent":["import mongoose from \"mongoose\";\n\nconst userSchema = new mongoose.Schema({\n  username: {\n    type: String,\n    required: true,\n    unique: true,\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n  },\n  password: {\n    type: String,\n    required: true,\n  },\n  isConfirmed: {\n    type: Boolean,\n    default: false,\n  },\n  confirmationToken: {\n    type: String,\n  },\n  highScore: {\n    type: Number,\n    default: 0,\n  },\n  wins: {\n    type: Number,\n    default: 0,\n  },\n  losses: {\n    type: Number,\n    default: 0,\n  },\n  winPercentage: {\n    type: Number,\n    default: 0,\n  },\n});\n\nexport default mongoose.models.User || mongoose.model(\"User\", userSchema);\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACrC,UAAU;QACR,MAAM;QACN,UAAU;QACV,QAAQ;IACV;IACA,OAAO;QACL,MAAM;QACN,UAAU;QACV,QAAQ;IACV;IACA,UAAU;QACR,MAAM;QACN,UAAU;IACZ;IACA,aAAa;QACX,MAAM;QACN,SAAS;IACX;IACA,mBAAmB;QACjB,MAAM;IACR;IACA,WAAW;QACT,MAAM;QACN,SAAS;IACX;IACA,MAAM;QACJ,MAAM;QACN,SAAS;IACX;IACA,QAAQ;QACN,MAAM;QACN,SAAS;IACX;IACA,eAAe;QACb,MAAM;QACN,SAAS;IACX;AACF;uCAEe,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ"}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file:///Users/kingoros/Personal%20Projects/thumbbat-upgraded/server/config/db.ts"],"sourcesContent":["import mongoose from \"mongoose\";\n\n// Use a type-safe workaround for global.mongoose\nconst globalWithMongoose = global as typeof globalThis & {\n  mongoose: {\n    conn: mongoose.Connection | null;\n    promise: Promise<mongoose.Connection> | null;\n  };\n};\n\n// Initialize global.mongoose if it doesn't exist\nif (!globalWithMongoose.mongoose) {\n  globalWithMongoose.mongoose = { conn: null, promise: null };\n}\n\nasync function dbConnect(): Promise<mongoose.Connection> {\n  const MONGODB_URI = process.env.MONGODB_URI;\n\n  if (!MONGODB_URI) {\n    console.error(\n      \"MONGODB_URI is not defined. Please check your environment variables.\"\n    );\n    process.exit(1);\n  }\n\n  if (globalWithMongoose.mongoose.conn) {\n    return globalWithMongoose.mongoose.conn;\n  }\n\n  if (!globalWithMongoose.mongoose.promise) {\n    globalWithMongoose.mongoose.promise = mongoose\n      .connect(MONGODB_URI, {\n        dbName: \"test\", // Replace with your actual DB name\n        bufferCommands: false,\n      })\n      .then((mongoose) => mongoose.connection);\n  }\n\n  globalWithMongoose.mongoose.conn = await globalWithMongoose.mongoose.promise;\n  return globalWithMongoose.mongoose.conn;\n}\n\nexport default dbConnect;\n"],"names":[],"mappings":";;;AAAA;;AAEA,iDAAiD;AACjD,MAAM,qBAAqB;AAO3B,iDAAiD;AACjD,IAAI,CAAC,mBAAmB,QAAQ,EAAE;IAChC,mBAAmB,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AAC5D;AAEA,eAAe;IACb,MAAM;IAEN,uCAAkB;;IAKlB;IAEA,IAAI,mBAAmB,QAAQ,CAAC,IAAI,EAAE;QACpC,OAAO,mBAAmB,QAAQ,CAAC,IAAI;IACzC;IAEA,IAAI,CAAC,mBAAmB,QAAQ,CAAC,OAAO,EAAE;QACxC,mBAAmB,QAAQ,CAAC,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAC3C,OAAO,CAAC,aAAa;YACpB,QAAQ;YACR,gBAAgB;QAClB,GACC,IAAI,CAAC,CAAC,WAAa,SAAS,UAAU;IAC3C;IAEA,mBAAmB,QAAQ,CAAC,IAAI,GAAG,MAAM,mBAAmB,QAAQ,CAAC,OAAO;IAC5E,OAAO,mBAAmB,QAAQ,CAAC,IAAI;AACzC;uCAEe"}},
    {"offset": {"line": 146, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 152, "column": 0}, "map": {"version":3,"sources":["file:///Users/kingoros/Personal%20Projects/thumbbat-upgraded/src/app/api/auth/confirm/route.ts"],"sourcesContent":["import User from \"@/server/models/User\";\nimport { NextResponse } from \"next/server\";\nimport dbConnect from \"@/server/config/db\";\n\n// Add CORS headers helper function\nfunction corsHeaders() {\n  return {\n    \"Access-Control-Allow-Origin\": \"*\",\n    \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, OPTIONS\",\n    \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\",\n  };\n}\n\n// Add OPTIONS handler for CORS preflight requests\nexport async function OPTIONS() {\n  return NextResponse.json({}, { headers: corsHeaders() });\n}\n\nexport async function GET(request: Request) {\n  try {\n    await dbConnect();\n    const { searchParams } = new URL(request.url);\n    const token = searchParams.get(\"token\");\n\n    if (!token) {\n      return NextResponse.json(\n        { error: \"Token is required\" },\n        { status: 400, headers: corsHeaders() }\n      );\n    }\n\n    const user = await User.findOne({ confirmationToken: token });\n    if (!user) {\n      return NextResponse.json(\n        { error: \"Invalid token\" },\n        { status: 400, headers: corsHeaders() }\n      );\n    }\n\n    user.isConfirmed = true;\n    user.confirmationToken = undefined;\n    await user.save();\n\n    return NextResponse.json(\n      { message: \"Account confirmed successfully!\" },\n      { headers: corsHeaders() }\n    );\n  } catch (error) {\n    console.error(\"Error confirming account:\", error);\n    return NextResponse.json(\n      { error: \"Error confirming account\" },\n      { status: 500, headers: corsHeaders() }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEA,mCAAmC;AACnC,SAAS;IACP,OAAO;QACL,+BAA+B;QAC/B,gCAAgC;QAChC,gCAAgC;IAClC;AACF;AAGO,eAAe;IACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,CAAC,GAAG;QAAE,SAAS;IAAc;AACxD;AAEO,eAAe,IAAI,OAAgB;IACxC,IAAI;QACF,MAAM,CAAA,GAAA,wHAAA,CAAA,UAAS,AAAD;QACd,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,QAAQ,aAAa,GAAG,CAAC;QAE/B,IAAI,CAAC,OAAO;YACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAoB,GAC7B;gBAAE,QAAQ;gBAAK,SAAS;YAAc;QAE1C;QAEA,MAAM,OAAO,MAAM,0HAAA,CAAA,UAAI,CAAC,OAAO,CAAC;YAAE,mBAAmB;QAAM;QAC3D,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAgB,GACzB;gBAAE,QAAQ;gBAAK,SAAS;YAAc;QAE1C;QAEA,KAAK,WAAW,GAAG;QACnB,KAAK,iBAAiB,GAAG;QACzB,MAAM,KAAK,IAAI;QAEf,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAAkC,GAC7C;YAAE,SAAS;QAAc;IAE7B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA2B,GACpC;YAAE,QAAQ;YAAK,SAAS;QAAc;IAE1C;AACF"}},
    {"offset": {"line": 217, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}